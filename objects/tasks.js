// Задача №1
//напишите функцию, которая возвращает сумму всех значений
const data = {
    a: 200,
    b: 300,
    c: {
        ca: 1000,
        cb: 2000
    },
    d: 0,
    e: 'this is string',
    f: true}

// Задача №2
// Напишите функцию, которая оставляет только все свойства со строковыми значениями, а все остальные удаляет
const words = {
    a: 200,
    b: "300",
    c: {
        ca: 1000,
        cb: 2000
    },
    d: 0,
    e: 'this is string',
    f: true}

// Задача №3
// Верните массив всех ключей из объекта (погуглить)
const cars = {
    Tesla: "2000$",
    Bmw: "3000$",
    Audi: "5000$"
}

// Задача №4
//Верните массив всех значений из объекта (погуглить)
const prices = {
    Tesla: "2000$",
    Bmw: "3000$",
    Audi: "5000$"
}

// Задача №5
//Напишите функцию "Что вы хотите узнать о пользователе?", которая будет запрашивать ключ, а выводить в консоль его значение.
// С использованием prompt мы запрашиваем name, функция должна вывести в результате "John"
//Пример:
let user = {
    name: "John",
    age: 30
};

// Задача №6
//Напишите функцию makePerson, которая будет принимать параметры человека (имя, возраст, вес и пол) как аргументы и выводить алертом эти данные.
let person = makePerson("John", 30);
alert(person.name); // John

// Задача №7
//Напишите функцию, которая проверяет,
// есть ли в объекте свойство "Audi" и если есть, возвращает его значение (погуглить оператор "in")
// есть ли в объекте свойство "Mercedes" и если нет, то добавляет его в объект и присваивает любое значение
const vehicles = {
    Tesla: "2000$",
    Bmw: "3000$",
    Audi: "5000$"
}

// Задача №8
// Создайте класс Ball. Объекты Ball должны принимать один аргумент «типа шара» при создании экземпляра.
// Если аргумент не указаны, объекты шара должны быть созданы с "типом шара" "regular".
ball1 = new Ball();
ball2 = new Ball("super");

ball1.ballType     //=> "regular"
ball2.ballType     //=> "super"

// Задача №9
// Давайте создадим систему поиска партнеров, которая поможет находить вакансии для разработчиков на основе ряда факторов.
// Один из самых простых, но наиболее важных факторов - это зарплата. Как разработчики мы знаем, сколько денег нам нужно, 
// чтобы поддерживать наш образ жизни, поэтому мы обычно имеем приблизительное представление о минимальной заработной плате, 
// которой мы были бы довольны.
// Давай попробуем.
// Мы создадим функцию соответствия, которая принимает кандидата и задание,
// которое вернет логическое значение, указывающее, является ли задание допустимым соответствием кандидату.
// У кандидата будет минимальная зарплата, поэтому это будет выглядеть так:
let candidate = {
  minSalary: 120000
}
// У вакансии будет максимальная зарплата, поэтому она будет выглядеть так:
let job = {
  maxSalary: 140000
}
// Если отсутствует минимальная зарплата кандидата или максимальная зарплата вакансии, выдается ошибка.
// Для соответствия минимальная зарплата кандидата должна быть меньше или равна максимальной зарплате вакансии.
// Однако давайте также добавим 10% пространства для маневра (вычитаемое из минимальной зарплаты кандидата) на случай,
// если кандидат - рок-звезда, которая любит программировать на JavaScript в свободное время, чтобы компания, предлагающая работу, могла что-то придумать :)
isCandidateFits(candidate, job) //=> true